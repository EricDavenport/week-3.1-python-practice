# Python Exercises for Beginners

## Exercise 1: Simple function
Create a function called `greet` that takes a name as an argument and returns a greeting string using the given name.

```python
def greet(name):
    # TODO: Return a greeting string using the given name
    pass

# Test
print(greet("Alice"))
```

## Exercise 2: Function with if-else
Create a function called `check_even_odd` that takes a number as an argument and returns "Even" if the number is even, and "Odd" if it's odd.

```python
def check_even_odd(number):
    # TODO: Return "Even" if the number is even, "Odd" otherwise
    pass

# Test
print(check_even_odd(7))
```

## Exercise 3: Function with multiple conditions
Create a function called `grade_scorer` that takes a score (0-100) as an argument and returns the corresponding letter grade: "A" for 90-100, "B" for 80-89, "C" for 70-79, "D" for 60-69, and "F" for below 60.

```python
def grade_scorer(score):
    # TODO: Return "A" for 90-100, "B" for 80-89, "C" for 70-79, "D" for 60-69, and "F" for below 60
    pass

# Test
print(grade_scorer(85))
```

## Exercise 4: Function using logical operators
Create a function called `login_check` that takes a username and password as arguments. Return True if the username is "admin" and the password is "12345", False otherwise.

```python
def login_check(username, password):
    # TODO: Return True if username is "admin" and password is "12345", False otherwise
    pass

# Test
print(login_check("admin", "12345"))
```

## Exercise 5: Function with nested if statements
Create a function called `number_description` that takes a number as an argument and returns "Positive even" for positive even numbers, "Positive odd" for positive odd numbers, "Negative" for negative numbers, and "Zero" for 0.

```python
def number_description(num):
    # TODO: Return "Positive even" for positive even numbers, "Positive odd" for positive odd numbers,
    # "Negative" for negative numbers, and "Zero" for 0
    pass

# Test
print(number_description(-4))
```

## Exercise 6: Function comparing Python to JavaScript syntax
Rewrite the following JavaScript function in Python:

```javascript
function jsComparison(x, y) {
    if (x === y) {
        return "Equal";
    } else if (x > y) {
        return "Greater";
    } else {
        return "Less";
    }
}
```

```python
def js_to_python_comparison(x, y):
    # TODO: Rewrite the JavaScript function in Python
    pass

# Test
print(js_to_python_comparison(5, 3))
```

## Exercise 7: Function using 'and' operator
Create a function called `is_valid_triangle` that takes three side lengths as arguments and returns True if they can form a valid triangle (sum of any two sides > third side), False otherwise.

```python
def is_valid_triangle(a, b, c):
    # TODO: Return True if the three sides can form a valid triangle, False otherwise
    pass

# Test
print(is_valid_triangle(3, 4, 5))
```

## Exercise 8: Function using 'or' operator
Create a function called `can_vote` that takes age and citizenship as arguments. Return True if age is 18 or above AND citizenship is "USA" or "Canada", False otherwise.

```python
def can_vote(age, citizenship):
    # TODO: Return True if age is 18 or above AND citizenship is "USA" or "Canada", False otherwise
    pass

# Test
print(can_vote(20, "USA"))
```

## Exercise 9: Function using 'not' operator
Create a function called `is_not_in_range` that takes three arguments: num, start, and end. Return True if num is NOT between start and end (inclusive), False otherwise.

```python
def is_not_in_range(num, start, end):
    # TODO: Return True if num is NOT between start and end (inclusive), False otherwise
    pass

# Test
print(is_not_in_range(15, 10, 20))
```

## Exercise 10: Function combining multiple concepts
Create a function called `calculate_ticket_price` that takes age, day, and is_student as arguments. Calculate the ticket price based on these rules:
- Base price is $10
- If it's a weekend (day is "Saturday" or "Sunday"), add $5
- If age is under 18 or over 65, apply a 20% discount
- If is_student is True and it's not a weekend, apply a 10% discount
Return the final ticket price.

```python
def calculate_ticket_price(age, day, is_student):
    # TODO: Calculate and return the final ticket price based on the given rules
    pass

# Test
print(calculate_ticket_price(25, "Saturday", True))
```
